/**
 * /api/inverter-analytics?view=day&plantId=all|1,2&date=YYYY-MM-DD
 * Returns { power:[{t,ac,dc}], yield:[{label,value}] }
 * Reads Sungrow Azure Tables listed in SVI_TABLES; columns in SVI_FIELDS JSON.
 */
const { TableClient } = require("@azure/data-tables");

const CORS_HEADERS = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET,OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type"
};

module.exports = async function (context, req) {
  if (req.method === "OPTIONS") {
    return { status: 204, headers: CORS_HEADERS };
  }

  // Simple ping
  if ((req.params && req.params.path === "ping") || req.query.ping === "1") {
    return { status: 200, headers: { ...CORS_HEADERS, "Content-Type": "text/plain" }, body: "ok" };
  }

  const CONN = process.env.TABLES_CONN_STRING
            || process.env.TABLES_CONNECTION_STRING
            || process.env.AZURE_STORAGE_CONNECTION_STRING;
  if (!CONN) {
    return { status: 500, headers: { ...CORS_HEADERS, "Content-Type": "application/json" },
             body: { success:false, error:"TABLES_CONN_STRING missing" } };
  }

  const view    = String(req.query.view || "day").toLowerCase();
  const dateStr = String(req.query.date || new Date().toISOString().slice(0,10));
  const tables  = String(process.env.SVI_TABLES || "")
                  .split(/[,;]\s*/).filter(Boolean);

  let fields = {};
  try { fields = JSON.parse(process.env.SVI_FIELDS || "{}"); } catch {}
  const COL = {
    t:   fields.time  || "Date_Time",
    ac:  fields.ac    || "Total_AC_Power_KW",
    dc:  fields.dc    || "Total_DC_Power_KW",
    yld: fields.yield || "Daily_Yield_KWH",
  };

  function toIsoUtc(v){
    if (!v) return null;
    if (v instanceof Date) return v.toISOString();
    const s = String(v).trim(); if (!s) return null;
    if (/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/.test(s)) return s.replace(" ","T")+"Z";
    if (/^\d{4}-\d{2}-\d{2}T/.test(s) && !/[zZ]$/.test(s)) return s+"Z";
    return s;
  }

  const start = new Date(dateStr + "T00:00:00Z");
  let   end   = new Date(start);
  if (view === "day")   end.setUTCDate(start.getUTCDate()+1);
  if (view === "week")  end.setUTCDate(start.getUTCDate()+7);
  if (view === "month") end = new Date(Date.UTC(start.getUTCFullYear(), start.getUTCMonth()+1, 1));
  if (view === "year")  end  = new Date(Date.UTC(start.getUTCFullYear()+1, 0, 1));

  const powerMap = new Map(); // ISO -> {ac,dc}
  const yieldMap = new Map(); // yyyy-mm-dd -> MWh

  function acc(iso, ac, dc, yKwh){
    const cur = powerMap.get(iso) || {ac:0,dc:0};
    cur.ac += (+ac || 0);
    cur.dc += (+dc || 0);
    powerMap.set(iso, cur);
    const d = iso.slice(0,10);
    yieldMap.set(d, (yieldMap.get(d) || 0) + ((+yKwh || 0)/1000));
  }

  try {
    for (const tbl of tables) {
      const client = TableClient.fromConnectionString(CONN, tbl, { allowInsecureConnection: true });
      for await (const e of client.listEntities()) {
        const when = new Date(toIsoUtc(e[COL.t] || e["Date_Time"] || e["Timestamp"]));
        if (!when || isNaN(when)) continue;
        if (when < start || when >= end) continue;

        const iso = when.toISOString();
        acc(
          iso,
          e[COL.ac]  ?? e["Total_AC_Power_KW"] ?? 0,
          e[COL.dc]  ?? e["Total_DC_Power_KW"] ?? 0,
          e[COL.yld] ?? e["Daily_Yield_KWH"]   ?? 0
        );
      }
    }

    const power = [...powerMap.entries()].sort((a,b)=>a[0].localeCompare(b[0]))
                    .map(([t,v])=>({ t, ac:+(v.ac||0), dc:+(v.dc||0) }));
    const yld   = [...yieldMap.entries()].sort((a,b)=>a[0].localeCompare(b[0]))
                    .map(([label,value])=>({ label, value:+(+value).toFixed(3) }));

    return { status: 200, headers: { ...CORS_HEADERS, "Content-Type": "application/json" },
             body: { power, yield: yld } };
  } catch (err) {
    context.log("inverter-analytics error:", err);
    return { status: 500, headers: { ...CORS_HEADERS, "Content-Type": "application/json" },
             body: { success:false, error:String(err) } };
  }
};
