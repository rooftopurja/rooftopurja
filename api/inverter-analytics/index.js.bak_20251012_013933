const { TableClient } = require("@azure/data-tables");

module.exports = async function (context, req) {
  const CONN = process.env.TABLES_CONN_STRING || process.env.TABLES_CONNECTION_STRING || process.env.AZURE_STORAGE_CONNECTION_STRING;
  if (!CONN) return { status:500, body:{ success:false, error:"TABLES_CONN_STRING missing" } };

  const view    = (req.query.view || "day").toLowerCase();
  const dateStr = (req.query.date || new Date().toISOString().slice(0,10));
  const tables  = String(process.env.SVI_TABLES || "").split(/[,;]\s*/).filter(Boolean);

  let fields = {};
  try { fields = JSON.parse(process.env.SVI_FIELDS || "{}"); } catch {}
  const COL = {
    t:   fields.time  || "Date_Time",
    ac:  fields.ac    || "Total_AC_Power_KW",
    dc:  fields.dc    || "Total_DC_Power_KW",
    yld: fields.yield || "Daily_Yield_KWH",
  };

  const start = new Date(dateStr + "T00:00:00Z");
  let   end   = new Date(start);
  if (view === "day")   end.setUTCDate(start.getUTCDate()+1);
  if (view === "week")  end.setUTCDate(start.getUTCDate()+7);
  if (view === "month") end = new Date(Date.UTC(start.getUTCFullYear(), start.getUTCMonth()+1, 1));
  if (view === "year")  end  = new Date(Date.UTC(start.getUTCFullYear()+1, 0, 1));

  const powerMap = new Map(); // ISO -> {ac,dc}
  const yieldMap = new Map(); // yyyy-mm-dd -> MWh

  function acc(iso, ac, dc, yKwh){
    const cur = powerMap.get(iso) || {ac:0,dc:0};
    cur.ac += (+ac || 0);
    cur.dc += (+dc || 0);
    powerMap.set(iso, cur);
    const d = iso.slice(0,10);
    yieldMap.set(d, (yieldMap.get(d) || 0) + ((+yKwh || 0)/1000));
  }

  try {
    for (const tbl of tables) {
      // allowInsecureConnection => needed for Azurite (http)
      const client = TableClient.fromConnectionString(CONN, tbl, { allowInsecureConnection: true });

      for await (const e of client.listEntities()) {
        const when = new Date(e[COL.t] || e["Date_Time"] || e["Timestamp"]);
        if (!when || isNaN(when)) continue;
        if (when < start || when >= end) continue;

        const iso = when.toISOString();
        acc(
          iso,
          e[COL.ac]  ?? e["Total_AC_Power_KW"] ?? 0,
          e[COL.dc]  ?? e["Total_DC_Power_KW"] ?? 0,
          e[COL.yld] ?? e["Daily_Yield_KWH"]   ?? 0
        );
      }
    }

    const power = [...powerMap.entries()].sort((a,b)=>a[0].localeCompare(b[0]))
                    .map(([t,v])=>({ t, ac:+(v.ac||0), dc:+(v.dc||0) }));
    const yld   = [...yieldMap.entries()].sort((a,b)=>a[0].localeCompare(b[0]))
                    .map(([label,value])=>({ label, value:+(+value).toFixed(3) }));

    return { status:200, body:{ power, yield: yld } };
  } catch (err) {
    context.log("inverter-analytics error:", err);
    return { status:500, body:{ success:false, error:String(err) } };
  }
};
